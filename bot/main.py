import aiogram
import asyncio
import random
import os

from settings.config import bot_token, channel_ids, channel_links

from time import sleep
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import CommandStart
from aiogram.enums import ParseMode
from aiogram.types import (
    KeyboardButton,
    Message,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    CallbackQuery
)

form_router = Router()

class user_fsm(StatesGroup):
    code = State()
    action_type = State()

def file_init():
    files_list = ['–§–∏–ª—å–º—ã.txt', '–°–µ—Ä–∏–∞–ª—ã.txt']
    for file in files_list:
        if not os.path.exists(file):
            print(f'–§–∞–π–ª: {file} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π')
            with open(file, 'w', encoding='utf-8'):
                pass
    
    with open('–§–∏–ª—å–º—ã.txt', 'r', encoding='utf-8') as file:
        details = [line.strip().split(':') for line in file.readlines()]
        films_dict = {code: title for code, title in details}
    
    with open('–°–µ—Ä–∏–∞–ª—ã.txt', 'r', encoding='utf-8') as file:
        details = [line.strip().split(':') for line in file.readlines()]
        serials_dict = {code: title for code, title in details}
    
    return films_dict, serials_dict

films_dict, serials_dict = file_init()

@form_router.message(lambda message: message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–ºüé¨' or message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ªüé¨')
async def search_random(message: Message):
    if message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–ºüé¨':
        code = random.choice(list(films_dict.keys()))
        film = films_dict.get(code)
        await message.answer(f'‚úÖ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞–π–¥–µ–Ω!\nüé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞: {film}\nüîé –ö–æ–¥ —Ñ–∏–ª—å–º–∞: {code}')
    elif message.text == '–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ªüé¨':
        code = random.choice(list(films_dict.keys()))
        serial = serials_dict.get(code)
        await message.answer(f'‚úÖ –°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω!\nüé¨ –ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–∏–∞–ª–∞: {serial}\nüîé –ö–æ–¥ —Ñ–∏–ª—å–º–∞: {code}')

@form_router.message(lambda message: message.text == '–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –∫–æ–¥—Éüîé' or message.text == '–ù–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª –ø–æ –∫–æ–¥—Éüîé')
async def get_code(message: Message, state: FSMContext):
    await message.answer('‚öôÔ∏è –í–≤–µ–¥–∏ –∫–æ–¥: ')
    if message.text == '–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –∫–æ–¥—Éüîé':
        action_type = 'Film'
    elif message.text == '–ù–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª –ø–æ –∫–æ–¥—Éüîé':
        action_type = 'Serial'
    await state.update_data(action_type=action_type)
    await state.set_state(user_fsm.code)

@form_router.message(user_fsm.code)
async def search_code(message: Message, state: FSMContext):
    data = await state.get_data()
    action_type = data.get('action_type')

    if action_type == 'Film':
        film = films_dict.get(message.text)
        if film: 
            await message.answer(f'‚úÖ –§–∏–ª—å–º –Ω–∞–π–¥–µ–Ω!\nüé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {film}\nüîé –ö–æ–¥: {message.text}') 
        else:
            await message.answer('‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω')
    elif action_type == 'Serial':
        serial = serials_dict.get(message.text)
        if serial: 
            await message.answer(f'‚úÖ –°–µ—Ä–∏–∞–ª –Ω–∞–π–¥–µ–Ω!\nüé¨ –ù–∞–∑–≤–∞–Ω–∏–µ: {serial}\nüîé –ö–æ–¥: {message.text}') 
        else:
            await message.answer('‚ùå –°–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')

async def bot_main(message: Message, bot):
    keyboard = ReplyKeyboardMarkup(keyboard=(
        [KeyboardButton(text='–ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º –ø–æ –∫–æ–¥—Éüîé')],
        [KeyboardButton(text='–ù–∞–π—Ç–∏ —Å–µ—Ä–∏–∞–ª –ø–æ –∫–æ–¥—Éüîé')],
        [KeyboardButton(text='–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–ºüé¨')],
        [KeyboardButton(text='–°–ª—É—á–∞–π–Ω—ã–π —Å–µ—Ä–∏–∞–ªüé¨')],
    ), resize_keyboard=True)

    await bot.send_message(chat_id=message.chat.id, text='‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ', reply_markup=keyboard)

@form_router.callback_query(lambda c: c.data == 'Check Subscription')
async def check_subscription(callback_query: CallbackQuery, bot):
    user_id = callback_query.from_user.id
    user_subscriptions = {chat_id: False for chat_id in channel_ids}

    processing_message = await bot.send_message(chat_id=user_id, text='‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–æ–∫...')
    for chat_id in channel_ids:
        try:
            user_result = await bot.get_chat_member(chat_id, user_id)
            if user_result.status in ['administrator', 'creator', 'member']:
                user_subscriptions[chat_id] = True
            else:
                await bot.edit_message_text(chat_id=user_id, message_id=processing_message.message_id, text='‚ùå –¢—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã!')
        except Exception as e:
            print(f'–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}')
            await bot.edit_message_text(chat_id=user_id, message_id=processing_message.message_id, text='‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–≤–æ–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–≤—Ç–æ—Ä–∏ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!')
    if all(user_subscriptions.values()):
        await bot.edit_message_text(chat_id=user_id, message_id=processing_message.message_id, text='‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É, —Ç–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!')
        sleep(2)
        await bot.delete_message(chat_id=user_id, message_id=processing_message.message_id)
        await bot_main(callback_query.message, bot)

@form_router.message(CommandStart())
async def bot_start(message: Message, bot):
    await message.answer('üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã–¥–∞—Å—Ç —Ç–µ–±–µ –Ω–∞–∑–≤–∞–Ω–∏–µ \nüé• —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ –∫–æ–¥—É.')

    channel_info_list = [await bot.get_chat(link) for link in channel_links]
    channel_title_list = [channel_info.title for channel_info in channel_info_list]

    markup = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text=channel_title, url=f'https://t.me/{link.replace("@", "")}')
            for link, channel_title in zip(channel_links, channel_title_list)
        ],
        [
            types.InlineKeyboardButton(text='‚òëÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏', callback_data='Check Subscription')
        ]
    ])
    
    await message.answer('üõë –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —ç—Ç–∏ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã!', reply_markup=markup)

async def bot_init():
    bot = Bot(token=bot_token)
    dp = Dispatcher()
    dp.include_router(form_router)
    await dp.start_polling(bot)

print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!\n–î–ª—è –≤—ã—Ö–æ–¥–∞: CTRL+C')

if __name__ == '__main__':
    asyncio.run(bot_init())